{
	"info": {
		"_postman_id": "97c858c3-6071-4a34-a1fb-2c162087b2c6",
		"name": "Todo App Rest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22623339"
	},
	"item": [
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseText\r",
							"\r",
							"let req = JSON.parse(pm.request.body.raw)\r",
							"\r",
							"pm.collectionVariables.set('fullname', req.fullname)\r",
							"pm.collectionVariables.set('email', req.email)\r",
							"pm.collectionVariables.set('password', req.password)\r",
							"\r",
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Response to be text', function () {\r",
							"    responseText = pm.response.text()\r",
							"})\r",
							"\r",
							"pm.test('Response text to be: \"Registered successfully\"', function () {\r",
							"    pm.expect(responseText).to.eql('Registered successfully')\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fullname\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Forgot Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response\r",
							"\r",
							"pm.test('status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response to be JSON format', function () {\r",
							"    response = pm.response.json()\r",
							"})\r",
							"\r",
							"pm.test('response schema is valid', function () {\r",
							"    const schema = {\r",
							"        type: 'object',\r",
							"        properties: {\r",
							"            email: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            token: {\r",
							"                type: 'string'\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set('password_reset_token', response.token)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "TodoPass",
							"type": "string"
						},
						{
							"key": "username",
							"value": "TodoUser",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/forgot-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"forgot-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('password', pm.variables.replaceIn('{{$randomPassword}}'))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseText\r",
							"\r",
							"pm.test('status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response to be text format', function () {\r",
							"    responseText = pm.response.text()\r",
							"})\r",
							"\r",
							"pm.test('response text to be \"Password reset successfully\"', function () {\r",
							"    pm.expect(responseText).to.eql('Password reset successfully')\r",
							"})\r",
							"\r",
							"pm.collectionVariables.unset('password_reset_token')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{password_reset_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"newPass\": \"{{password}}\",\r\n    \"confirmPass\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/reset-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"reset-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response\r",
							"\r",
							"pm.test('status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response to be JSON format', function () {\r",
							"    response = pm.response.json()\r",
							"})\r",
							"\r",
							"pm.test('response schema is valid', function () {\r",
							"    const schema = {\r",
							"        type: 'object',\r",
							"        properties: {\r",
							"            fullname: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            email: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            initials: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            token: {\r",
							"                type: 'string'\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set('token', response.token)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "TodoPass",
							"type": "string"
						},
						{
							"key": "username",
							"value": "TodoUser",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response\r",
							"\r",
							"pm.test('status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response to be JSON format', function () {\r",
							"    response = pm.response.json()\r",
							"})\r",
							"\r",
							"pm.test('response schema is valid', function () {\r",
							"    const schema = {\r",
							"        type: 'object',\r",
							"        properties: {\r",
							"            id: {\r",
							"                type: 'number'\r",
							"            },\r",
							"            name: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            status: {\r",
							"                type: 'number'\r",
							"            },\r",
							"            color: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            userEmail: {\r",
							"                type: 'string'\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let status = pm.variables.replaceIn('{{$randomInt}}') / 10\r",
							"pm.collectionVariables.set('todo_status', status)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomPhrase}}\",\r\n    \"status\": {{todo_status}},\r\n    \"userEmail\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/create-todo",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"create-todo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response\r",
							"\r",
							"pm.test('status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response to be JSON format', function () {\r",
							"    response = pm.response.json()\r",
							"})\r",
							"\r",
							"pm.test('response schema is valid', function () {\r",
							"    const schema = {\r",
							"        type: 'array'\r",
							"    }\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set('todo_id', response[0].id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/get-todos?userEmail={{email}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"get-todos"
					],
					"query": [
						{
							"key": "userEmail",
							"value": "{{email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response\r",
							"\r",
							"pm.test('status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response to be JSON format', function () {\r",
							"    response = pm.response.json()\r",
							"})\r",
							"\r",
							"pm.test('response schema is valid', function () {\r",
							"    const schema = {\r",
							"        type: 'object',\r",
							"        properties: {\r",
							"            id: {\r",
							"                type: 'number'\r",
							"            },\r",
							"            name: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            status: {\r",
							"                type: 'number'\r",
							"            },\r",
							"            color: {\r",
							"                type: 'string'\r",
							"            },\r",
							"            userEmail: {\r",
							"                type: 'string'\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('todo_status', 80)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{todo_id}},\r\n    \"name\": \"{{$randomPhrase}}\",\r\n    \"status\": {{todo_status}},\r\n    \"userEmail\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/edit-todo",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"edit-todo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response\r",
							"\r",
							"pm.test('status code is 200', function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response to be text format', function () {\r",
							"    response = pm.response.text()\r",
							"})\r",
							"\r",
							"pm.test('deleted todo Id to be:', function () {\r",
							"    pm.expect(parseInt(response)).to.eql(pm.collectionVariables.get('todo_id'))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/delete-todo?todoId={{todo_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"delete-todo"
					],
					"query": [
						{
							"key": "todoId",
							"value": "{{todo_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api",
			"type": "string"
		},
		{
			"key": "fullname",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "todo_status",
			"value": ""
		},
		{
			"key": "todo_id",
			"value": ""
		},
		{
			"key": "todo_color",
			"value": ""
		}
	]
}